package com.tomford.product_service.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Represents the Product entity for PostgreSQL database.
 * This class is mapped to the "products" table and contains fields that correspond to the product attributes.
 * It uses Lombok annotations to reduce boilerplate code for getters, setters, constructors, and builders.
 */
@Entity
@Table(name = "products", indexes = {
        @Index(name = "idx_category", columnList = "category"),
})
@AllArgsConstructor
@NoArgsConstructor
@Data
@Builder
public class Product {
    /**
     * Unique identifier for the product, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Product name, type String
     * Must not be null
     */
    @NotBlank(message = "Product name cannot be empty")
    private String name;

    /**
     * Product model, type String
     * Must not be blank
     */
    @NotBlank(message = "Product model cannot be empty")
    private String model;

    /**
     * Product description, type String
     * Size smaller than 500 and not blank
     */
    @Size(max = 500, message = "Description too long")
    @NotBlank(message = "Product description cannot be empty")
    private String description;

    /**
     * Product rating, type Byte
     * Must be positive or zero
     */
    @PositiveOrZero(message = "Product rating must be positive or zero")
    private Byte rating;

    /**
     * Product reviews count, type Long
     * Must be positive or zero
     */
    @PositiveOrZero(message = "Product reviews count must be positive or zero")
    @Column(name = "reviews_count")
    private Long reviewsCount;

    /**
     * Product price, type Integer
     * Must be positive or zero and not null
     */
    @PositiveOrZero(message = "Product price must be positive or zero")
    @NotNull(message = "Product price cannot be null")
    private Integer price;

    /**
     * Product flacone size, type Short
     * Must be positive and not null
     */
    @NotBlank(message = "Product size cannot be blank")
    private String volumes;

    /**
     * Product stock quantity, type Integer
     * Must be positive or zero and not null
     */
    @PositiveOrZero(message = "Product stock quantity must be positive or zero")
    @NotNull(message = "Product stock quantity cannot be null")
    @Column(name = "stock_quantity")
    private Integer stockQuantity;

    /**
     * Product availability, type Boolean
     * Must be not null
     */
    @NotNull(message = "Product availability cannot be null")
    private Boolean available;

    /**
     * Product details, type String
     * Must be not blank
     */
    @NotBlank(message = "Product details cannot be blank")
    private String details;

    /**
     * Product discount, type Byte
     * Must be positive or zero
     * Length must be smaller than 100
     */
    @PositiveOrZero(message = "Product discount must be positive or zero")
    @Size(max = 100, message = "Product discount length must be smaller than 100")
    private Byte discount;

    /**
     * Product tags, type String
     * Product tags cannot be blank
     */
    @NotBlank(message = "Product tags cannot be empty")
    private String tags;

    /**
     * Product color, type String
     * Product color cannot be empty
     */
    @NotBlank(message = "Product color cannot be empty")
    private String color;

    /**
     * Product weight in grams, type Double
     * Product weight cannot be negative
     * Product weight cannot be null
     */
    @Size(min = 0, message = "Product weight cannot be negative")
    @NotNull(message = "Product weight cannot be null")
    private Double weight;

    /**
     * Product ingredients, type String
     * Product ingredients cannot be empty
     */
    @NotBlank(message = "Product ingredients cannot be empty")
    private String ingredients;

    /**
     * Product video's url, type String
     */
    @Column(name = "video_url")
    private String videoUrl;

    /**
     * Product gallery images, type String
     */
    @Column(name = "gallery_images")
    private String galleryImages;

    /**
     * Product main image url, type String
     * Product main image cannot be null
     */
    @NotNull(message = "Product main image cannot be null")
    private String mainImage;

    /**
     * Product sku code, type String
     * Product sku code cannot be null
     */
    @NotNull(message = "Product sku code cannot be null")
    private String skuCode;

    /**
     * Product category, type String
     * Product category cannot be empty
     */
    @NotBlank(message = "Product category cannot be empty")
    private String category;

    /**
     * Selled, type Long
     * Selled count cannot must be 0 or positive
     */
    @PositiveOrZero(message = "Selled count must be positive or zero")
    private Integer selled = 0;

    /**
     * Hover image, type String
     */
    @Column(name = "hover_image")
    private String hoverImage;
}